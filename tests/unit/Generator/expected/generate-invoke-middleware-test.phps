<?php

declare(strict_types=1);

use Jasny\SwitchRoute\NotFoundException;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;
use Psr\Http\Message\ResponseFactoryInterface;

/**
 * PSR-15 compatible middleware that invokes an action based on the route attributes of the server request.
 *
 * This file is generated by SwitchRoute.
 * Do not modify it manually. Any changes will be overwritten.
 */
class InvokeMiddleware implements MiddlewareInterface
{
    /**
     * @var callable|null
     */
    protected $instantiate;

    /**
     * @param ResponseFactoryInterface $responseFactory  Used for default not-found response.
     * @param callable                 $instantiate      Instantiate controller / action classes.
     */
    public function __construct(?callable $instantiate = null)
    {
        $this->instantiate = $instantiate;
    }

    /**
     * Process an incoming server request.
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $include = $request->getAttribute('route:include', null);
        if ($include !== null) {
            return require $include;
        }

        $controller = $request->getAttribute('route:controller', '');
        $action = $request->getAttribute('route:action', '');

        switch ($controller) {
            case 'info':
                switch ($action) {
                    case '':
                        return call('info', '', $request, $request->getAttribute('route:{id}', NULL));
                }
                break;
            case 'user':
                switch ($action) {
                    case 'list':
                        return call('user', 'list', $request, $request->getAttribute('route:{id}', NULL));
                    case 'add':
                        return call('user', 'add', $request, $request->getAttribute('route:{id}', NULL));
                    case 'get':
                        return call('user', 'get', $request, $request->getAttribute('route:{id}', NULL));
                    case 'update':
                        return call('user', 'update', $request, $request->getAttribute('route:{id}', NULL));
                    case 'delete':
                        return call('user', 'delete', $request, $request->getAttribute('route:{id}', NULL));
                }
                break;
            case '':
                switch ($action) {
                    case 'not-found':
                        return call('', 'not-found', $request, $request->getAttribute('route:{id}', NULL));
                    case 'list-photos':
                        return call('', 'list-photos', $request, $request->getAttribute('route:{id}', NULL));
                    case 'add-photos':
                        return call('', 'add-photos', $request, $request->getAttribute('route:{id}', NULL));
                }
                break;
        }

        throw new NotFoundException("No default route specified");
    }
}