<?php

declare(strict_types=1);

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

/**
 * PSR-15 compatible middleware that add route attributes to the server request.
 *
 * This file is generated by SwitchRoute.
 * Do not modify it manually. Any changes will be overwritten.
 */
class RouteMiddleware implements MiddlewareInterface
{
    /**
     * Add routing attributes to the server request
     */
    protected function applyRouting(ServerRequestInterface $request): ServerRequestInterface
    {
        $method = $request->getMethod();
        $path = $request->getUri()->getPath();
        $segments = $path === "/" ? [] : explode("/", trim($path, "/"));

        switch ($segments[0] ?? "\0") {
            case "\0":
                $request = $request->withAttribute('route:allowed_methods', ['GET']);
                switch ($method) {
                    case 'GET':
                        return $request
                            ->withAttribute('route:controller', 'InfoController');
                }
                break 1;
            case "users":
                switch ($segments[1] ?? "\0") {
                    case "\0":
                        $request = $request->withAttribute('route:allowed_methods', ['GET', 'POST']);
                        switch ($method) {
                            case 'GET':
                                return $request
                                    ->withAttribute('route:controller', 'UserController')
                                    ->withAttribute('route:action', 'listAction');
                            case 'POST':
                                return $request
                                    ->withAttribute('route:controller', 'UserController')
                                    ->withAttribute('route:action', 'addAction');
                        }
                        break 2;
                    default:
                        switch ($segments[2] ?? "\0") {
                            case "\0":
                                $request = $request->withAttribute('route:allowed_methods', ['GET', 'POST', 'PUT', 'DELETE']);
                                switch ($method) {
                                    case 'GET':
                                        return $request
                                            ->withAttribute('route:controller', 'UserController')
                                            ->withAttribute('route:action', 'getAction')
                                            ->withAttribute('route:{id}', $segments[1]);
                                    case 'POST':
                                    case 'PUT':
                                        return $request
                                            ->withAttribute('route:controller', 'UserController')
                                            ->withAttribute('route:action', 'updateAction')
                                            ->withAttribute('route:{id}', $segments[1]);
                                    case 'DELETE':
                                        return $request
                                            ->withAttribute('route:controller', 'UserController')
                                            ->withAttribute('route:action', 'deleteAction')
                                            ->withAttribute('route:{id}', $segments[1]);
                                }
                                break 3;
                            case "photos":
                                switch ($segments[3] ?? "\0") {
                                    case "\0":
                                        $request = $request->withAttribute('route:allowed_methods', ['GET', 'POST']);
                                        switch ($method) {
                                            case 'GET':
                                                return $request
                                                    ->withAttribute('route:action', 'ListPhotosAction')
                                                    ->withAttribute('route:{id}', $segments[1]);
                                            case 'POST':
                                                return $request
                                                    ->withAttribute('route:action', 'AddPhotosAction')
                                                    ->withAttribute('route:{id}', $segments[1]);
                                        }
                                        break 4;
                                }
                                break 3;
                        }
                        break 2;
                }
                break 1;
            case "export":
                switch ($segments[1] ?? "\0") {
                    case "\0":
                        $request = $request->withAttribute('route:allowed_methods', ['POST']);
                        switch ($method) {
                            case 'POST':
                                return $request
                                    ->withAttribute('route:include', 'scripts/export.php');
                        }
                        break 2;
                }
                break 1;
        }

        return $request
            ->withAttribute('route:action', 'NotFoundAction');
    }

    /**
     * Process an incoming server request.
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        return $handler->handle($this->applyRouting($request));
    }
}