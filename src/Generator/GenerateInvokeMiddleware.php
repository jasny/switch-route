<?php

declare(strict_types=1);

namespace Jasny\SwitchRoute\Generator;

use Jasny\SwitchRoute\InvalidRouteException;
use Jasny\SwitchRoute\Invoker;
use Jasny\SwitchRoute\InvokerInterface;
use Psr\Http\Message\ServerRequestInterface;
use ReflectionException;

/**
 * Generate a script that invokes .
 */
class GenerateInvokeMiddleware extends AbstractGenerate
{
    protected InvokerInterface $invoker;

    /**
     * GenerateScript constructor.
     */
    public function __construct(InvokerInterface $invoker = null)
    {
        $this->invoker = $invoker ?? new Invoker();
    }

    /**
     * Invoke code generation.
     *
     * @param string $name      Class name
     * @param array  $routes    Ignored
     * @param array  $structure
     * @return string
     */
    public function __invoke(string $name, array $routes, array $structure): string
    {
        $invokeCode = self::indent($this->generateSwitchFromRoutes($routes), 8)
            . (!isset($structure["\e"]) ? "\n\n" . '$this->notFound($request);' : '');

        [$namespace, $class] = $this->generateNs($name);

        return <<<CODE
<?php

declare(strict_types=1);
{$namespace}
use Jasny\SwitchRoute\NotFoundException;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;
use Psr\Http\Message\ResponseFactoryInterface;

/**
 * PSR-15 compatible middleware that invokes an action based on the route attributes of the server request.
 *
 * This file is generated by SwitchRoute.
 * Do not modify it manually. Any changes will be overwritten.
 */
class {$class} implements MiddlewareInterface
{
    /**
     * @var callable|null
     */
    protected \$instantiate;

    /**
     * @param callable \$instantiate  Instantiate controller / action classes.
     */
    public function __construct(?callable \$instantiate = null)
    {
        \$this->instantiate = \$instantiate;
    }

    /**
     * Process an incoming server request.
     */
    public function process(ServerRequestInterface \$request, RequestHandlerInterface \$handler): ResponseInterface
    {
        \$include = \$request->getAttribute('route:include', null);
        if (\$include !== null) {
            return require \$include;
        }

        \$controller = \$request->getAttribute('route:controller', '');
        \$action = \$request->getAttribute('route:action', '');

{$invokeCode}

        throw new NotFoundException("No default route specified");
    }
}
CODE;
    }

    /**
     * Generate the PHP script with a switch for routing.
     */
    protected function generateSwitchFromRoutes(array $routes): string
    {
        $grouped = $this->groupRoutes($routes);
        $grouped[''][''] = null;

        $code = [];
        $code[] = "switch (\$controller) {";

        foreach ($grouped as $controller => $controllerRoutes) {
            $code[] = "    case '" . addslashes($controller) . "':";
            $code[] = "        switch (\$action) {";

            foreach ($controllerRoutes as $action => $key) {
                $route = [
                    'controller' => $controller !== '' ? $controller : null,
                    'action' => $action !== '' ? $action : null,
                ];

                if ($key !== null) {
                    $code[] = self::indent("case '" . addslashes($action) . "':", 12);
                    $code[] = self::indent($this->generateRoute($key, $route, []), 16);
                }
            }
            $code[] = "        }";
            $code[] = "        break;";
        }

        $code[] = "}";

        return join("\n", $code);
    }

    /**
     * Group routes by controller name.
     */
    protected function groupRoutes(array $routes): array
    {
        $grouped = [];

        foreach ($routes as $key => $route) {
            if (isset($route['include'])) {
                continue;
            }

            if (!isset($route['controller']) && !isset($route['action'])) {
                $key = preg_replace('/{.*?}/', '*', $key);
                throw new InvalidRouteException("Route for '$key' should specify 'include', 'controller', " .
                    "or 'action'");
            }

            $controller = $route['controller'] ?? '';
            $action = $route['action'] ?? '';

            if (!isset($grouped[$controller][$action])) {
                $grouped[$controller][$action] = $key;
            }
        }

        return $grouped;
    }

    /**
     * Generate routing code for an endpoint.
     *
     * @throws InvalidRouteException
     */
    protected function generateRoute(string $key, array $route, array $vars): string
    {
        try {
            $invocation = $this->invoker->generateInvocation(
                $route,
                function ($name, $type, $default) {
                    if ($type == ServerRequestInterface::class || is_a($type, ServerRequestInterface::class, true)) {
                        return '$request';
                    }

                    return "\$request->getAttribute('route:{" . addslashes($name) . "}', "
                        . var_export($default, true) . ")";
                },
                '(isset($this->instantiate) ? ($this->instantiate)(\'%1$s\') : new \\%1$s)'
            );
        } catch (ReflectionException $exception) {
            $key = preg_replace('/{.*?}/', '*', $key);
            throw new InvalidRouteException("Invalid route for '$key'. " . $exception->getMessage(), 0, $exception);
        }

        return "return $invocation;";
    }
}
